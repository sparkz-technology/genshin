// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  username      String?        @unique
  role          String         @default("USER")
  accounts      Account[]
  sessions      Session[]
  settings      settings[]
  redeemedCode  redeemedCode[]
  log           log[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model settings {
  userId          String @map("userId")
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  id              String @id @default(cuid()) @map("_id")
  uid             String @unique
  region          String
  lang            String
  game_biz        String
  sLangKey        String
  cookie_token_v2 String
  account_mid_v2  String
  account_id_v2   String
  ltuid_v2        String
  ltoken_v2       String
  act_id          String
}

model redeemedCode {
  userId    String   @map("userId")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  id        String   @id @default(cuid()) @map("_id")
  code      String   @unique
  status    String   @default("NOT_REDEEMED")
  createdAt DateTime @default(now())
  log       log[]
}

model log {
  userId         String        @map("userId")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  id             String        @id @default(cuid()) @map("_id")
  type           String        @default("REDEEMED")
  redeemed       redeemedCode? @relation(fields: [redeemedCodeId], references: [id])
  message        String
  status         String
  createdAt      DateTime      @default(now())
  redeemedCodeId String?
}
