// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? // Changed from refreshToken to refresh_token
  access_token      String? // Changed from accessToken to access_token
  expires_at        Int?    // Changed from expiresAt to expires_at
  token_type        String? // Changed from tokenType to token_type
  scope             String?
  id_token          String? // Changed from idToken to id_token
  session_state     String? // Changed from sessionState to session_state
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}


model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model User {
  id            String         @id @default(cuid()) @map("_id")
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  username      String?        @unique
  role          String         @default("USER")
  accounts      Account[]
  sessions      Session[]
  settings      Settings[]
  redeemedCodes RedeemedCode[]
  logs          Log[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Settings {
  id              String   @id @default(cuid()) @map("_id")
  userId          String   @map("user_id")
  uid             String   @unique
  region          String
  lang            String
  gameBiz         String   @map("game_biz")
  sLangKey        String
  cookieTokenV2   String   @map("cookie_token_v2")
  accountMidV2    String   @map("account_mid_v2")
  accountIdV2     String   @map("account_id_v2")
  ltuidV2         String   @map("ltuid_v2")
  ltokenV2        String   @map("ltoken_v2")
  actId           String   @map("act_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
  @@index([userId])
}

model RedeemedCode {
  id        String   @id @default(cuid()) @map("_id")
  userId    String   @map("user_id")
  code      String   @unique
  status    String   @default("NOT_REDEEMED")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs      Log[]

  @@map("redeemed_codes")
  @@index([userId])
  @@index([status])
}

model Log {
  id             String        @id @default(cuid()) @map("_id")
  userId         String        @map("user_id")
  type           String        @default("REDEEMED")
  redeemedCodeId String?       @map("redeemed_code_id")
  message        String
  status         String
  createdAt      DateTime      @default(now())
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  redeemed       RedeemedCode? @relation(fields: [redeemedCodeId], references: [id])

  @@map("logs")
  @@index([userId])
  @@index([type])
  @@index([redeemedCodeId])
}

model RedeemCodeWebsite {
  id          String       @id @default(cuid()) @map("_id")
  name        String       @unique
  url         String
  selector    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  redeemCodes RedeemCode[]

  @@map("redeem_code_websites")
}

model RedeemCode {
  id        String            @id @default(cuid()) @map("_id")
  websiteId String            @map("website_id")
  code      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  website   RedeemCodeWebsite @relation(fields: [websiteId], references: [id], onDelete: Cascade)

  @@map("redeem_codes")
  @@index([websiteId])
}
